class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        //brute force
        // int count=0;
        // int n = nums.length;
        // int sum=0;
        // for(int i=0;i<n;i++)
        // {
        //     sum=0;
        //     for(int j=i;j<n;j++)
        //     {
        //         sum+=nums[j];
        //         if(sum%k==0)
        //         {
        //             count++;
        //         }
        //     }
        //     // sum=0;
        // }
        // return count;
        Map<Integer,Integer> mp = new HashMap<>();
        mp.put(0,1);
        int answer=0;
        int sum=0;
        for(int num:nums)
        {
            sum+=num;
            sum=sum%k;
            if(sum<0)
            {
                sum+=k;
            }
            if(mp.containsKey(sum))
            {
                answer+=mp.get(sum);
                mp.put(sum,mp.get(sum)+1);
            }
            else
            {
                mp.put(sum,1);
            }
        }
        return answer;
    }
}

//hashmap better solution
// public class Solution {
//     public int subarraysDivByK(int[] nums, int k) {
//         // Initialize count of subarrays, prefix sum, and hash map for remainders
//         int count = 0;
//         int prefixSum = 0;
//         HashMap<Integer, Integer> prefixMap = new HashMap<>();
//         prefixMap.put(0, 1); // To handle subarrays that start from the beginning

//         for (int num : nums) {
//             // Update prefix sum
//             prefixSum += num;
            
//             // Calculate the remainder of the prefix sum divided by k
//             int mod = prefixSum % k;
            
//             // Adjust negative remainders to be positive
//             if (mod < 0) {
//                 mod += k;
//             }
            
//             // If this remainder has been seen before, it means there are subarrays ending here that are divisible by k
//             if (prefixMap.containsKey(mod)) {
//                 count += prefixMap.get(mod);
//                 prefixMap.put(mod, prefixMap.get(mod) + 1);
//             } else {
//                 prefixMap.put(mod, 1);
//             }
//         }
        
//         return count; // Total number of subarrays divisible by k
//     }
// }