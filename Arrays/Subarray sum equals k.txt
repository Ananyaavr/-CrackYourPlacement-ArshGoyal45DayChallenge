class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int sum = 0;
        int count = 0;
        for(int i=0;i<n;i++)
        {
            sum=0;
            for(int j=i;j<n;j++)
            {
                sum+=nums[j];
                if(sum==k)
                {
                    count++;
                }
            }
        }
        return count;
    }
}


//hashmap o(n)

// class Solution {
//     public int subarraySum(int[] nums, int k) {
//         Map<Integer, Integer> cache = new HashMap<>();
//         cache.put(0, 1);
//         int count = 0;
//         int sum = 0;

//         for (int num : nums) {
//             sum += num;
//             int diff = sum - k;
//             if (cache.containsKey(diff)) {
//                 count += cache.get(diff);
//             }
//             cache.put(sum, cache.getOrDefault(sum, 0) + 1);
//         }

//         return count;
//     }
// }